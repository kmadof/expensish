# Docker image
# Build a Docker image to deploy, run, or push to a container registry.
# Add steps that use Docker Compose, tag images, push to a registry, run an image, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

variables:
  buildConfiguration: 'Release'
  imageNameApi: 'expensish-api:$(build.buildId)'
  imageNameApp: 'expensish:$(build.buildId)'

jobs:
  - job: ExpensishAPI
    # condition: failed()
    pool:
      vmImage: 'Ubuntu-16.04'

    steps:

    - script: dotnet build --configuration $(buildConfiguration) expensish-api/Expensish-api.sln
      displayName: 'dotnet build $(buildConfiguration)'
    - script: |
        mkdir $(Build.SourcesDirectory)/results
        dotnet test --logger trx /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura  expensish-api/Expensish.Api.Tests /p:Exclude=\"[xunit.*]*,[*]Coverlet.Core*\"
        dotnet test --logger trx /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:MergeWtih=$(Build.SourcesDirectory)/expensish-api/Expensish.Api.Tests/coverage.cobertura.xml expensish-api/Expensish.Api.Tests /p:Exclude=\"[xunit.*]*,[*]Coverlet.Core*\"
        copy $(Build.SourcesDirectory)/expensish-api/Expensish.Api.Tests/coverage.cobertura.xml $(Build.SourcesDirectory)/results  
        dotnet tool install dotnet-reportgenerator-globaltool --tool-path . --version 4.0.0-rc4
        ./reportgenerator "-reports:$(Build.SourcesDirectory)/expensish-api/Expensish.Api.Tests/coverage.cobertura.xml" "-targetdir:results" "-reporttypes:HTMLInline;HTMLChart" "-assemblyfilters:-xunit*"
      displayName: 'Unit testing'
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '**/*.trx'
    - task: PublishCodeCoverageResults@1
      inputs:
        summaryFileLocation: $(Build.SourcesDirectory)/expensish-api/Expensish.Api.Tests/coverage.cobertura.xml
        reportDirectory: $(Build.SourcesDirectory)/results
        codecoverageTool: cobertura

    - script: |
        # dotnet build --configuration $(buildConfiguration) expensish-api/Expensish-api.sln
        # dotnet test expensish-api/Expensish.Api.Tests --configuration $(buildConfiguration) --logger trx
        dotnet publish expensish-api --configuration $(buildConfiguration) --output out
        docker build -f docker/azure/expensish-api/Dockerfile -t $(dockerId)/$(imageNameApi) .
        docker login -u $(dockerId) -p $pswd
        docker push $(dockerId)/$(imageNameApi)
      displayName: 'Create docker image for Expensish.Api'
      condition: failed()
      env:
        pswd: $(dockerPassword)

  - job: ExpensishAPP

    pool:
      vmImage: 'Ubuntu-16.04'

    steps:

    - task: NodeTool@0 
      inputs:
        versionSpec: '11.x' # replace this value with the version that you need for your project
    
    # - task: Npm@1
    #   displayName: 'npm install PhantomJS'
    #   inputs:
    #     command: custom

    #     verbose: false

    #     customCommand: 'install phantomjs-prebuilt'


    - task: Npm@1
      displayName: 'npm install'
      inputs:
        workingDir: expensish-app

        verbose: false


    - task: Npm@1
      displayName: 'Run Tests'
      inputs:
        command: custom

        workingDir: expensish-app

        verbose: false

        customCommand: 'run test-single-headless'


    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      inputs:
        testResultsFiles: 'TESTS-*.xml'
        searchFolder: '$(Build.SourcesDirectory)/expensish-app/src/'

      condition: always()

    - task: Npm@1
      displayName: 'npm build'
      inputs:
        command: custom

        workingDir: expensish-app

        verbose: false

        customCommand: 'run build-prod'

    - script: |
        # dotnet build --configuration $(buildConfiguration) expensish-api/Expensish-api.sln
        # dotnet test expensish-api/Expensish.Api.Tests --configuration $(buildConfiguration) --logger trx
        # dotnet publish expensish-api --configuration $(buildConfiguration) --output out
        docker build -f docker/azure/expensish-app/Dockerfile -t $(dockerId)/$(imageNameApp) .
        docker login -u $(dockerId) -p $pswd
        docker push $(dockerId)/$(imageNameApp)
      displayName: 'Create docker image for Expensish.App'
      condition: succeeded()
      env:
        pswd: $(dockerPassword)

    # - script: npm install --only=dev
    # - script: npm install -g @angular/cli

    # - script: |
    #     npm install -g @angular/cli
    #     npm install expensish-app
    #     ng build --prod expensish-app

    - script: dir
      workingDirectory: $(System.DefaultWorkingDirectory)/expensish-app/src/
      displayName: List contents of a folder System.DefaultWorkingDirectory expensish-app
      condition: succeededOrFailed()

    - script: dir
      workingDirectory: $(Build.SourcesDirectory)/expensish-app/src/
      displayName: List contents of a folder Build.SourcesDirectory expensish-app
      condition: succeededOrFailed()

