# Docker image
# Build a Docker image to deploy, run, or push to a container registry.
# Add steps that use Docker Compose, tag images, push to a registry, run an image, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

pool:
  vmImage: 'Ubuntu-16.04'

variables:
  buildConfiguration: 'Release'
  imageName: 'expensish-api:$(build.buildId)'

steps:

# - task: DotNetCoreCLI@2
#   displayName: Test Expensish.Api
#   inputs:
#     command: test

#     projects: '**/*Tests/*.csproj'

#     arguments: '--configuration $(buildConfiguration) --logger trx'
#     publishTestResults: true

# - task: PublishTestResults@2
#   condition: succeededOrFailed()
#   inputs:
#     testRunner: VSTest
#     testResultsFiles: '**/*.trx'

- script: dotnet build --configuration $(buildConfiguration) expensish-api/Expensish-api.sln
  displayName: 'dotnet build $(buildConfiguration)'
- script: |
    mkdir $(Build.SourcesDirectory)/results
    dotnet test --logger trx /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura  expensish-api/Expensish.Api.Tests 
    dotnet test --logger trx /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:MergeWtih=$(Build.SourcesDirectory)/expensish-api/Expensish.Api.Tests/coverage.cobertura.xml expensish-api/Expensish.Api.Tests 
    copy $(Build.SourcesDirectory)/expensish-api/Expensish.Api.Tests /coverage.cobertura.xml $(Build.SourcesDirectory)/results
    dotnet tool install --global dotnet-reportgenerator-globaltool --tool-path . --version 4.0.0-rc4
    reportgenerator "-reports:$(Build.SourcesDirectory)/expensish-api/Expensish.Api.Tests /coverage.cobertura.xml" "-targetdir:results" "-reporttypes:HTMLInline;HTMLChart"
  displayName: 'Unit testing'
- task: PublishTestResults@2
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'
- task: PublishCodeCoverageResults@1
  inputs:
    summaryFileLocation: $(Build.SourcesDirectory)/results/coverage.cobertura.xml
    reportDirectory: $(Build.SourcesDirectory)/results
    codecoverageTool: cobertura

# - script: |
#     dotnet build --configuration $(buildConfiguration) expensish-api/Expensish-api.sln
#     # dotnet test expensish-api/Expensish.Api.Tests --configuration $(buildConfiguration) --logger trx
#     dotnet test expensish-api/Expensish.Api.Tests --configuration $(buildConfiguration) --logger trx /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(System.DefaultWorkingDirectory)/TestResults/Coverage/
#     cd ./expensish-api/Expensish.Api.Tests/
#     dotnet reportgenerator "-reports:$(System.DefaultWorkingDirectory)/TestResults/Coverage/coverage.cobertura.xml" "-targetdir:$(System.DefaultWorkingDirectory)/TestResults/Coverage/Reports" "-reportTypes:htmlInline" "-tag:$(Build.BuildNumber)"
#     cd ../../
#   displayName: 'Test Coverage Expensish.Api'
#   condition: succeededOrFailed()
#   env:
#     pswd: $(dockerPassword)

# - script: dir
#   workingDirectory: $(System.DefaultWorkingDirectory)/expensish-api/Expensish.Api.Tests/TestResults
#   displayName: List contents of a folder System.DefaultWorkingDirectory
#   condition: succeededOrFailed()

# - task: PublishCodeCoverageResults@1
#   inputs:
#     codeCoverageTool: cobertura
#     # summaryFileLocation: $(System.DefaultWorkingDirectory)/TestResults/Coverage/**/*.xml
#     # reportDirectory: $(System.DefaultWorkingDirectory)/TestResults/Coverage/Reports
#     summaryFileLocation: $(System.DefaultWorkingDirectory)/TestResults/*.xml
#     reportDirectory: $(System.DefaultWorkingDirectory)/TestResults/Reports
#     failIfCoverageEmpty: false
#   condition: succeededOrFailed()

- script: |
    # dotnet build --configuration $(buildConfiguration) expensish-api/Expensish-api.sln
    # dotnet test expensish-api/Expensish.Api.Tests --configuration $(buildConfiguration) --logger trx
    dotnet publish expensish-api --configuration $(buildConfiguration) --output out
    docker build -f docker/azure/expensish-api/Dockerfile -t $(dockerId)/$(imageName) .
    docker login -u $(dockerId) -p $pswd
    docker push $(dockerId)/$(imageName)
  displayName: 'Create docker image for Expensish.Api'
  condition: succeeded()
  env:
    pswd: $(dockerPassword)


